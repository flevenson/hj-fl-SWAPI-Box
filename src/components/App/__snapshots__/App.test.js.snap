// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should match a snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <header
          className="app-header"
        >
          <h1
            className="site-heading"
          >
            SWAPI Box
          </h1>
          <NavBar
            getData={[Function]}
            handleNavClick={[Function]}
            selected=""
          />
        </header>,
        <aside
          className="app-aside"
        >
          <SideText
            filmText={Object {}}
          />
        </aside>,
        <main>
          <CardContainer
            display={Object {}}
            people={Object {}}
            planets={Object {}}
            selected=""
            vehicles={Object {}}
          />
        </main>,
      ],
      "className": "app",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="site-heading"
            >
              SWAPI Box
            </h1>,
            <NavBar
              getData={[Function]}
              handleNavClick={[Function]}
              selected=""
            />,
          ],
          "className": "app-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "SWAPI Box",
              "className": "site-heading",
            },
            "ref": null,
            "rendered": "SWAPI Box",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "getData": [Function],
              "handleNavClick": [Function],
              "selected": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <SideText
            filmText={Object {}}
          />,
          "className": "app-aside",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "filmText": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "aside",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <CardContainer
            display={Object {}}
            people={Object {}}
            planets={Object {}}
            selected=""
            vehicles={Object {}}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "display": Object {},
            "people": Object {},
            "planets": Object {},
            "selected": "",
            "vehicles": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "main",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <header
            className="app-header"
          >
            <h1
              className="site-heading"
            >
              SWAPI Box
            </h1>
            <NavBar
              getData={[Function]}
              handleNavClick={[Function]}
              selected=""
            />
          </header>,
          <aside
            className="app-aside"
          >
            <SideText
              filmText={Object {}}
            />
          </aside>,
          <main>
            <CardContainer
              display={Object {}}
              people={Object {}}
              planets={Object {}}
              selected=""
              vehicles={Object {}}
            />
          </main>,
        ],
        "className": "app",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="site-heading"
              >
                SWAPI Box
              </h1>,
              <NavBar
                getData={[Function]}
                handleNavClick={[Function]}
                selected=""
              />,
            ],
            "className": "app-header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "SWAPI Box",
                "className": "site-heading",
              },
              "ref": null,
              "rendered": "SWAPI Box",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "getData": [Function],
                "handleNavClick": [Function],
                "selected": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <SideText
              filmText={Object {}}
            />,
            "className": "app-aside",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "filmText": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "aside",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <CardContainer
              display={Object {}}
              people={Object {}}
              planets={Object {}}
              selected=""
              vehicles={Object {}}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "display": Object {},
              "people": Object {},
              "planets": Object {},
              "selected": "",
              "vehicles": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "main",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
